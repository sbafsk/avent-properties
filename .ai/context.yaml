project:
  name: "Avent Properties"
  description: "Luxury real estate platform in Uruguay for Dubai investors"
  type: "Web Application"
  status: "Active Development"

technology:
  frontend: "Next.js 15 + React 19 + TypeScript"
  styling: "TailwindCSS + shadcn/ui + Radix UI"
  backend: "Supabase (PostgreSQL + Auth + Storage)"
  api: "Apollo Server + Supabase SDK"
  state: "Redux Toolkit + React Query"
  forms: "React Hook Form + Zod validation"
  testing: "Jest + React Testing Library + Playwright"
  deployment: "Vercel (MVP) â†’ AWS (future)"

architecture:
  pattern: "Apollo Server + Supabase SDK Architecture"
  description: "Clean, standard GraphQL implementation with Apollo Server using Supabase SDK"
  benefits:
    - "Efficient database access via Supabase SDK"
    - "Full TypeScript support with generated types"
    - "Standard Apollo patterns for maintainability"
    - "Easy to extend with new resolvers"
    - "Enterprise-grade SOLID principles"

current_status:
  phase: "Tour Reservation System Development"
  completion: "85% - Foundation, GraphQL, Testing complete"
  next_priority: "Complete tour booking with 10% deposit"
  timeline: "Q1 2025"

key_features:
  - "Property listings with advanced search"
  - "Tour reservations with deposit system"
  - "Multi-role access (Client, Agency, Admin)"
  - "JWT authentication with role-based access"
  - "Responsive design with luxury UI"

development_standards:
  - "TypeScript strict mode"
  - "ESLint with strict rules"
  - "Jest testing with >80% coverage"
  - "Conventional commit messages"
  - "Pre-commit quality gates"
  - "SOLID principles implementation"

documentation:
  structure: "AI-friendly single source of truth"
  location: "./docs/"
  mcp_integration: "4 MCP servers configured for comprehensive context"

graphql:
  endpoint: "/api/graphql"
  schema: "Comprehensive property and reservation types"
  resolvers: "Supabase SDK integration"
  authentication: "JWT-based with role-based access"
  business_logic: "Comprehensive validation and rules"

patterns:
  - "Repository Pattern for data access"
  - "Validation Builder Pattern for forms"
  - "Custom Error Hierarchy following SOLID principles"
  - "Strategy Pattern for validation rules"
  - "Factory Pattern for component creation"
