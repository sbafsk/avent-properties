// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Management
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  role       UserRole @default(CLIENT)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  reservations TourReservation[]
  transactions Transaction[]
  contact_requests ContactRequest[]

  @@map("users")
}

enum UserRole {
  ADMIN
  CLIENT
  AGENCY
}

// Agency Management
model Agency {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String?
  address    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  properties Property[]

  @@map("agencies")
}

// Property Listings
model Property {
  id             String         @id @default(cuid())
  title          String
  description    String
  price          Float
  currency       String         @default("USD")
  city           String
  neighborhood   String?
  property_type  String
  bedrooms       Int?
  bathrooms      Int?
  area_m2        Int?
  amenities      String[]       @default([])
  images         String[]       @default([])
  status         PropertyStatus @default(AVAILABLE)
  agency_id      String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  // Relations
  agency       Agency            @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  reservations TourReservation[]

  @@map("properties")
}

enum PropertyStatus {
  AVAILABLE
  RESERVED
  SOLD
}

// Tour Reservations
model TourReservation {
  id              String            @id @default(cuid())
  user_id         String
  property_id     String
  scheduled_date  DateTime
  deposit_amount  Float
  status          ReservationStatus @default(PENDING)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  // Relations
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  property  Property  @relation(fields: [property_id], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("tour_reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Financial Transactions
model Transaction {
  id             String          @id @default(cuid())
  amount         Float
  type           TransactionType
  status         TransactionStatus @default(PENDING)
  reservation_id String?
  user_id        String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  // Relations
  user        User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reservation TourReservation? @relation(fields: [reservation_id], references: [id], onDelete: SetNull)

  @@map("transactions")
}

enum TransactionType {
  DEPOSIT
  COMMISSION
  REFUND
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Contact Requests
model ContactRequest {
  id         String        @id @default(cuid())
  name       String
  email      String
  phone      String?
  message    String
  property_id String?
  status     ContactStatus @default(NEW)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  // Relations
  user      User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  user_id   String?

  @@map("contact_requests")
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Audit Logs
model AuditLog {
  id          String   @id @default(cuid())
  user_id     String?
  action      String
  table_name  String
  record_id   String?
  old_values  Json?
  new_values  Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())

  @@map("audit_logs")
}
